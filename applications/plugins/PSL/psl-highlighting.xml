<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd">
<!--
 ***************************************************************************
 ** Writing a Kate Highlighting XML File
 ** http://kate-editor.org/article/writing_a_kate_highlighting_xml_file
 **
 ** Python part taken from https://github.com/mtorromeo/kate-syntax-files/blob/master/python.xml
 **
 ***************************************************************************
-->
<language name="PSL" section="Markup" version="2" kateversion="2.4" extensions="*.psl" mimetype="application/psl" author="Damien Marchal(damien.marchal@univ-lille1.fr)" license="GPL">
  <highlighting>
  <list name="import">
                          <item> import </item>
                          <item> from </item>
                          <item> as </item>
                  </list>
                  <list name="defs">
                          <item> class </item>
                          <item> def </item>
                          <item> del </item>
                          <item> global </item>
                          <item> lambda </item>
                          <item> nonlocal </item>
                  </list>
                  <list name="operators">
                          <item> and </item>
                          <item> in </item>
                          <item> is </item>
                          <item> not </item>
                          <item> or </item>
                  </list>
                  <list name="flow">
                          <item> assert </item>
                          <item> break </item>
                          <item> continue </item>
                          <item> elif </item>
                          <item> else </item>
                          <item> except </item>
                          <item> finally </item>
                          <item> for </item>
                          <item> if </item>
                          <item> pass </item>
                          <item> raise </item>
                          <item> return </item>
                          <item> try </item>
                          <item> while </item>
                          <item> with </item>
                          <item> yield </item>
                          <item> async </item>
                          <item> await </item>
                  </list>
                  <list name="builtinfuncs">
                          <item> __import__ </item>
                          <item> abs </item>
                          <item> all </item>
                          <item> any </item>
                          <item> apply </item>
                          <item> ascii </item>
                          <item> basestring </item>
                          <item> bin </item>
                          <item> bool </item>
                          <item> buffer </item>
                          <item> bytearray </item>
                          <item> bytes </item>
                          <item> callable </item>
                          <item> chr </item>
                          <item> classmethod </item>
                          <item> cmp </item>
                          <item> coerce </item>
                          <item> compile </item>
                          <item> complex </item>
                          <item> delattr </item>
                          <item> dict </item>
                          <item> dir </item>
                          <item> divmod </item>
                          <item> enumerate </item>
                          <item> eval </item>
                          <item> exec </item>
                          <item> execfile </item>
                          <item> file </item>
                          <item> filter </item>
                          <item> float </item>
                          <item> format </item>
                          <item> frozenset </item>
                          <item> getattr </item>
                          <item> globals </item>
                          <item> hasattr </item>
                          <item> hash </item>
                          <item> help </item>
                          <item> hex </item>
                          <item> id </item>
                          <item> input </item>
                          <item> int </item>
                          <item> intern </item>
                          <item> isinstance </item>
                          <item> issubclass </item>
                          <item> iter </item>
                          <item> len </item>
                          <item> list </item>
                          <item> locals </item>
                          <item> long </item>
                          <item> map </item>
                          <item> max </item>
                          <item> memoryview </item>
                          <item> min </item>
                          <item> next </item>
                          <item> object </item>
                          <item> oct </item>
                          <item> open </item>
                          <item> ord </item>
                          <item> pow </item>
                          <item> print </item>
                          <item> property </item>
                          <item> range </item>
                          <item> raw_input </item>
                          <item> reduce </item>
                          <item> reload </item>
                          <item> repr </item>
                          <item> reversed </item>
                          <item> round </item>
                          <item> set </item>
                          <item> setattr </item>
                          <item> slice </item>
                          <item> sorted </item>
                          <item> staticmethod </item>
                          <item> str </item>
                          <item> sum </item>
                          <item> super </item>
                          <item> tuple </item>
                          <item> type </item>
                          <item> unichr </item>
                          <item> unicode </item>
                          <item> vars </item>
                          <item> xrange </item>
                          <item> zip </item>
                  </list>
                  <list name="specialvars">
                          <item> None </item>
                          <item> self </item>
                          <item> True </item>
                          <item> False </item>
                          <item> NotImplemented </item>
                          <item> Ellipsis </item>
                          <item> __debug__ </item>
                          <item> __file__ </item>
                          <item> __name__ </item>
                  </list>
                  <list name="bindings">
                          <item> SIGNAL </item>
                          <item> SLOT </item>
                          <item> connect </item>
                  </list>
                  <list name="overloaders">
                          <item>__new__</item>
                          <item>__init__</item>
                          <item>__del__</item>
                          <item>__repr__</item>
                          <item>__str__</item>
                          <item>__lt__</item>
                          <item>__le__</item>
                          <item>__eq__</item>
                          <item>__ne__</item>
                          <item>__gt__</item>
                          <item>__ge__</item>
                          <item>__cmp__</item>
                          <item>__rcmp__</item>
                          <item>__hash__</item>
                          <item>__nonzero__</item>
                          <item>__unicode__</item>
                          <item>__getattr__</item>
                          <item>__setattr__</item>
                          <item>__delattr__</item>
                          <item>__getattribute__</item>
                          <item>__get__</item>
                          <item>__set__</item>
                          <item>__delete__</item>
                          <item>__call__</item>
                          <item>__len__</item>
                          <item>__getitem__</item>
                          <item>__setitem__</item>
                          <item>__delitem__</item>
                          <item>__iter__</item>
                          <item>__reversed__</item>
                          <item>__contains__</item>
                          <item>__getslice__</item>
                          <item>__setslice__</item>
                          <item>__delslice__</item>
                          <item>__add__</item>
                          <item>__sub__</item>
                          <item>__mul__</item>
                          <item>__floordiv__</item>
                          <item>__mod__</item>
                          <item>__divmod__</item>
                          <item>__pow__</item>
                          <item>__lshift__</item>
                          <item>__rshift__</item>
                          <item>__and__</item>
                          <item>__xor__</item>
                          <item>__or__</item>
                          <item>__div__</item>
                          <item>__truediv__</item>
                          <item>__radd__</item>
                          <item>__rsub__</item>
                          <item>__rmul__</item>
                          <item>__rdiv__</item>
                          <item>__rtruediv__</item>
                          <item>__rfloordiv__</item>
                          <item>__rmod__</item>
                          <item>__rdivmod__</item>
                          <item>__rpow__</item>
                          <item>__rlshift__</item>
                          <item>__rrshift__</item>
                          <item>__rand__</item>
                          <item>__rxor__</item>
                          <item>__ror__</item>
                          <item>__iadd__</item>
                          <item>__isub__</item>
                          <item>__imul__</item>
                          <item>__idiv__</item>
                          <item>__itruediv__</item>
                          <item>__ifloordiv__</item>
                          <item>__imod__</item>
                          <item>__ipow__</item>
                          <item>__ilshift__</item>
                          <item>__irshift__</item>
                          <item>__iand__</item>
                          <item>__ixor__</item>
                          <item>__ior__</item>
                          <item>__neg__</item>
                          <item>__pos__</item>
                          <item>__abs__</item>
                          <item>__invert__</item>
                          <item>__complex__</item>
                          <item>__int__</item>
                          <item>__long__</item>
                          <item>__float__</item>
                          <item>__oct__</item>
                          <item>__hex__</item>
                          <item>__index__</item>
                          <item>__coerce__</item>
                          <item>__enter__</item>
                          <item>__exit__</item>
                          <item>__bytes__</item>
                          <item>__format__</item>
                          <item>__next__</item>
                          <item>__dir__</item>
                          <item>__await__</item>
                          <item>__aiter__</item>
                          <item>__anext__</item>
                          <item>__aenter__</item>
                          <item>__aexit__</item>
                  </list>
                  <list name="exceptions">
                          <!--
                                  Exceptions list resources used:
                                  - http://docs.python.org/2.7/library/exceptions.html#exception-hierarchy
                                  - http://docs.python.org/3.4/library/exceptions.html#exception-hierarchy
                          -->
                          <item>ArithmeticError</item>
                          <item>AssertionError</item>
                          <item>AttributeError</item>
                          <item>BaseException</item>
                          <item>BlockingIOError</item>
                          <item>BrokenPipeError</item>
                          <item>BufferError</item>
                          <item>BytesWarning</item>
                          <item>ChildProcessError</item>
                          <item>ConnectionAbortedError</item>
                          <item>ConnectionError</item>
                          <item>ConnectionRefusedError</item>
                          <item>ConnectionResetError</item>
                          <item>DeprecationWarning</item>
                          <item>EnvironmentError</item>
                          <item>EOFError</item>
                          <item>Exception</item>
                          <item>FileExistsError</item>
                          <item>FileNotFoundError</item>
                          <item>FloatingPointError</item>
                          <item>FutureWarning</item>
                          <item>GeneratorExit</item>
                          <item>ImportError</item>
                          <item>ImportWarning</item>
                          <item>IndentationError</item>
                          <item>IndexError</item>
                          <item>InterruptedError</item>
                          <item>IOError</item>
                          <item>IsADirectoryError</item>
                          <item>KeyboardInterrupt</item>
                          <item>KeyError</item>
                          <item>LookupError</item>
                          <item>MemoryError</item>
                          <item>NameError</item>
                          <item>NotADirectoryError</item>
                          <item>NotImplementedError</item>
                          <item>OSError</item>
                          <item>OverflowError</item>
                          <item>PendingDeprecationWarning</item>
                          <item>PermissionError</item>
                          <item>ProcessLookupError</item>
                          <item>ReferenceError</item>
                          <item>ResourceWarning</item>
                          <item>RuntimeError</item>
                          <item>RuntimeWarning</item>
                          <item>StandardError</item>
                          <item>StopIteration</item>
                          <item>SyntaxError</item>
                          <item>SyntaxWarning</item>
                          <item>SystemError</item>
                          <item>SystemExit</item>
                          <item>TabError</item>
                          <item>TimeoutError</item>
                          <item>TypeError</item>
                          <item>UnboundLocalError</item>
                          <item>UnicodeDecodeError</item>
                          <item>UnicodeEncodeError</item>
                          <item>UnicodeError</item>
                          <item>UnicodeTranslateError</item>
                          <item>UnicodeWarning</item>
                          <item>UserWarning</item>
                          <item>ValueError</item>
                          <item>Warning</item>
                          <item>WindowsError</item>
                          <item>ZeroDivisionError</item>
  </list>

    <list name="Constants">
      <item>null</item>
      <item>true</item>
      <item>false</item>
    </list>

   <list name="PSLKeywords">
        <item>Node</item>
        <item>Template</item>
        <item>Alias</item>
        <item>Import</item>
        <item>Python</item>
   </list>

   <list name="SofaKeywords">
      <item>VisualModelImpl</item>
      <item>VisualParameter</item>
      <item>OglModel</item>
      <item>RequiredPlugin</item>
    </list>

    <contexts>

      <context name="Normal" lineEndContext="#stay" attribute="Style_Alert">
          <DetectSpaces/>
          <keyword String="PSLKeywords" context="#stay" attribute="Style_SofaKeyword"/>
          <keyword String="SofaKeywords" context="#stay" attribute="Style_SofaKeyword"/>
          <RegExpr String="[A-Z][a-zA-Z_0-9]+" context="#stay" attribute="Style_SofaKeyword"/>
          <DetectChar char=":" context="#stay" attribute="Style_SofaKeyword"/>
          <RegExpr attribute="Style_Comment" String="#" insensitive="true" firstNonSpace="false" context="Q-comment"/>
          <RegExpr attribute="Style_Comment" String="//" insensitive="true" firstNonSpace="false" context="Q-comment"/>

          <DetectChar attribute="Style_SofaKeyword" char="{" context="Sofa_Dictionary" beginRegion="Sofa_Dictionary"/>
          <DetectChar attribute="Style_SofaKeyword" char="}" context="#pop" endRegion="Sofa_Dictionary"/>
      </context>

      <context name="Sofa_Single_String" attribute="Style_String_Value" lineEndContext="#pop" noIndentationBasedFolding="true">
          <StringDetect String="&quot;"  context="#pop" attribute="Style_String_Value"/>
          <StringDetect String="'"  context="#pop" attribute="Style_String_Value"/>
      </context>

      <context name="Sofa_MultiLine_String" attribute="Style_String_Value" lineEndContext="#stay" noIndentationBasedFolding="true">
          <StringDetect String="'''"  context="#pop" attribute="Style_String_Value"/>
      </context>

      <context name="Sofa_Python_String" attribute="Style_Python_Value" lineEndContext="#pop" noIndentationBasedFolding="true">
            <StringDetect String="&quot;" context="#pop" attribute="Style_String_Value"/>
      </context>

      <context name="Sofa_PythonMultiLine_String" attribute="Style_Python_Value" lineEndContext="#stay" noIndentationBasedFolding="true">
        <StringDetect String="'''" context="#pop" attribute="Style_String_Value" endRegion="Sofa_MultiLinePython"/>

                                <keyword attribute="Import" String="import" context="#stay"/>
                                <keyword attribute="Definition Keyword" String="defs" context="#stay"/>
                                <keyword attribute="Operator Keyword" String="operators" context="#stay"/>
                                <keyword attribute="Flow Control Keyword" String="flow" context="#stay"/>
                                <keyword attribute="Builtin Function" String="builtinfuncs" context="#stay"/>
                                <keyword attribute="Special Variable" String="specialvars" context="#stay"/>
                                <keyword attribute="Extensions" String="bindings" context="#stay"/>
                                <keyword attribute="Exceptions" String="exceptions" context="#stay"/>
                                <keyword attribute="Overloaders" String="overloaders" context="#stay"/>
                                <RegExpr attribute="ClassNames" String="[A-Z][a-zA-Z_0-9]+" context="#stay"/>
                                <RegExpr attribute="Normal Text" String="[a-z_][a-zA-Z_][a-zA-Z_0-9]+" context="#stay"/>

                                <RegExpr attribute="Complex" String=" ((([0-9]*\.[0-9]+|[0-9]+\.)|([0-9]+|([0-9]*\.[0-9]+|[0-9]+\.))[eE](\+|-)?[0-9]+)|[0-9]+)[jJ]" context="#stay"/>
                                <Float attribute="Float" context="#stay" />
                                <HlCHex attribute="Hex" context="#stay"/>
                                <HlCOct attribute="Octal" context="#stay"/>
                                <Int attribute="Int" context="#stay">
                                        <StringDetect attribute="Int" String="L" insensitive="true" context="#stay"/>
                                </Int>

                                <RegExpr attribute="String" String="u?'"                  insensitive="true" context="Single A-string"/>
                                <RegExpr attribute="String" String="u?&quot;"             insensitive="true" context="Single Q-string"/>


                                <AnyChar attribute="Operator" String="+*/%\|=;\!&lt;&gt;!^&amp;~-@" context="#stay"/>
      </context>

<context name="Single A-string" attribute="String" lineEndContext="#stay">
                                <DetectChar attribute="String" char="'" context="#pop"/>
</context>
<context name="Single Q-string" attribute="String" lineEndContext="#stay">
                                <DetectChar attribute="String" char="&quot;" context="#pop"/>
</context>

      <context name="Sofa_Dictionary" attribute="Style_Debug" lineEndContext="#stay" noIndentationBasedFolding="true">
            <DetectSpaces/>
            <keyword String="PSLKeywords" context="#stay" attribute="Style_SofaKeyword"/>
            <keyword String="SofaKeywords" context="#stay" attribute="Style_SofaKeyword"/>
            <RegExpr String="[A-Z][a-zA-Z_0-9\._]*" context="#stay" attribute="Style_SofaKeyword"/>
            <RegExpr String="[a-z][a-zA-Z_0-9\._]*" context="#stay" attribute="Style_SofaProperty"/>
            <DetectChar char=":" context="#stay" attribute="Style_SofaKeyword"/>
            <RegExpr attribute="Style_Comment" String="#" insensitive="true" firstNonSpace="false" context="Q-comment"/>
            <RegExpr attribute="Style_Comment" String="//" insensitive="true" firstNonSpace="false" context="Q-comment"/>

            <StringDetect String="'''"  context="Sofa_PythonMultiLine_String" attribute="Style_String_Value" beginRegion="Sofa_MultiLinePython"/>
            <StringDetect String="p&quot;"  context="Sofa_Python_String" attribute="Style_String_Value"/>
            <DetectChar char="&quot;"   context="Sofa_Single_String" attribute="Style_String_Value"/>
            <DetectChar char="'"        context="Sofa_Single_String" attribute="Style_String_Value"/>

            <DetectChar attribute="Style_SofaKeyword" char="[" context="Sofa_List" beginRegion="Sofa_List"/>
            <DetectChar attribute="Style_SofaKeyword" char="]" context="#pop" endRegion="Sofa_List"/>

            <DetectChar attribute="Style_SofaKeyword" char="{" context="Sofa_Dictionary" beginRegion="Sofa_Dictionary"/>
            <DetectChar attribute="Style_SofaKeyword" char="}" context="#pop" endRegion="Sofa_Dictionary"/>

            <RegExpr String="-?(?:[0-9]|[1-9][0-9]+)\.[0-9]+(?:[eE][+-]?[0-9]+)?" context="#stay" insensitive="false" minimal="false" attribute="Style_Float" />
            <RegExpr String="-?(?:[0-9]|[1-9][0-9]+)(?:[eE][+-]?[0-9]+)?" context="#stay" insensitive="false" minimal="false" attribute="Style_Decimal" />
       </context>

      <context name="Sofa_List" attribute="Style_Debug" lineEndContext="#stay" noIndentationBasedFolding="true">
        <DetectSpaces/>

        <RegExpr attribute="Style_Comment" String="#" insensitive="true" firstNonSpace="false" context="Q-comment"/>
        <RegExpr attribute="Style_Comment" String="//" insensitive="true" firstNonSpace="false" context="Q-comment"/>

        <DetectChar char="&quot;"   context="Sofa_Single_String" attribute="Style_String_Value"/>
        <DetectChar char="'"        context="Sofa_Single_String" attribute="Style_String_Value"/>
        <DetectChar char=","        context="#stay" attribute="Style_SofaKeyword"/>

        <DetectChar attribute="Style_SofaKeyword" char="[" context="Sofa_List" beginRegion="Sofa_List"/>
        <DetectChar attribute="Style_SofaKeyword" char="]" context="#pop" endRegion="Sofa_List"/>

        <RegExpr String="-?(?:[0-9]|[1-9][0-9]+)\.[0-9]+(?:[eE][+-]?[0-9]+)?" context="#stay" insensitive="false" minimal="false" attribute="Style_Float" />
        <RegExpr String="-?(?:[0-9]|[1-9][0-9]+)(?:[eE][+-]?[0-9]+)?" context="#stay" insensitive="false" minimal="false" attribute="Style_Decimal" />
    </context>


       <context name="Q-comment" attribute="Style_Comment" lineEndContext="#pop">
            <HlCStringChar attribute="Style_Comment" context="#stay"/>
       </context>

    <itemDatas>
      <itemData name="Style_Normal"             defStyleNum="dsNormal" spellChecking="false"/>

      <itemData name="Style_Seperator_Pair"     defStyleNum="dsFunction" bold="true" />
      <itemData name="Style_Seperator_Array"    defStyleNum="dsOthers" bold="true" />

      <itemData name="Style_Decimal"            defStyleNum="dsDecVal" />
      <itemData name="Style_Float"              defStyleNum="dsFloat" />
      <itemData name="Style_String_Key"         defStyleNum="dsKeyword"/>
      <itemData name="Style_String_Value"       defStyleNum="dsDataType" />
      <itemData name="Style_String_Key_Char"    defStyleNum="dsChar" />
      <itemData name="Style_String_Value_Char"  defStyleNum="dsChar" />

      <itemData name="Style_SofaProperty"       defStyleNum="dsKeyword" spellChecking="false"/>
      <itemData name="Style_SofaKeyword"        defStyleNum="dsFloat" bold="false" italics="true"/>

      <itemData name="Style_Comment"            defStyleNum="dsChar" bold="false"/>

      <itemData name="Style_Debug"              defStyleNum="dsError" bold="true" italics="true"/>


      <itemData name="Style_Error"              defStyleNum="dsError" />
      <itemData name="Style_ToDo"               defStyleNum="dsNormal" strikeout="true" spellChecking="false"/>

      <itemData name="Style_Alert"              defStyleNum="dsAlert" />

<itemData name="Normal Text" defStyleNum="dsNormal" spellChecking="false"/>
                        <itemData name="Definition Keyword" defStyleNum="dsKeyword" spellChecking="false"/>
                        <itemData name="Operator" defStyleNum="dsOperator" spellChecking="false"/>
                        <itemData name="Operator Keyword" defStyleNum="dsKeyword" spellChecking="false"/>
                        <itemData name="Flow Control Keyword" defStyleNum="dsControlFlow" spellChecking="false"/>
                        <itemData name="Builtin Function" defStyleNum="dsBuiltIn" spellChecking="false"/>
                        <itemData name="Special Variable" defStyleNum="dsVariable" spellChecking="false"/>
                        <itemData name="Extensions" defStyleNum="dsExtension" spellChecking="false"/>
                        <itemData name="Exceptions" defStyleNum="dsPreprocessor" spellChecking="false"/>
                        <itemData name="Overloaders" defStyleNum="dsFunction" spellChecking="false"/>
                        <itemData name="Import" defStyleNum="dsImport" spellChecking="false"/>
                        <itemData name="Float" defStyleNum="dsFloat" spellChecking="false"/>
                        <itemData name="Int" defStyleNum="dsDecVal" spellChecking="false"/>
                        <itemData name="Hex" defStyleNum="dsBaseN" spellChecking="false"/>
                        <itemData name="Octal" defStyleNum="dsBaseN" spellChecking="false"/>
                        <itemData name="Complex" defStyleNum="dsOthers" spellChecking="false"/>
                        <itemData name="Comment" defStyleNum="dsComment"/>
                        <itemData name="String" defStyleNum="dsString"/>
                        <itemData name="ClassNames" defStyleNum="dsOthers" color="#FCAD3D" selColor="#ffffff" bold="1" italic="0" spellChecking="false"/>
                        <itemData name="Raw String" defStyleNum="dsVerbatimString"/>
                        <itemData name="F-String" defStyleNum="dsSpecialString"/>
                        <itemData name="Raw F-String" defStyleNum="dsVerbatimString"/>
                        <itemData name="String Char" defStyleNum="dsChar" spellChecking="false"/>
                        <itemData name="String Substitution" defStyleNum="dsSpecialChar" spellChecking="false"/>
<itemData name="Decorator" defStyleNum="dsAttribute" spellChecking="false"/>
    </itemDatas>
  </highlighting>
</language>
<!--
// kate: space-indent on; indent-width 2; replace-tabs on;
-->

