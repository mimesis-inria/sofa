#!/usr/bin/env python
# -*- coding: utf-8 -*-

import Sofa
import os

# This scene illustrates the basic functionality of the "PythonScriptDataEngine" (PSDE). First a small introduction the PSDE is given, then the scene itself is explained.
#
# The PSDE  works similar to a function block in Simulink or comparable software. The user can define a block (a PSDE) declaring its Inputs, Outputs (I/Os)
# and its behavior using Python alone. It has some similarities with the "PythonScriptController" (PSC). The two main differences are:
# - PSDE-objects are not triggered by events (not conceptually at least). Rather, the functionality should be implemented in the update() function of the associated script,
#   which is called once per simulation frame. 
# - I/Os can be added directly to the object inside the parse() function of the PSDE-object. Linking using the '@'-syntax also works. Therefore, the PSDE-object behaves like any other object
#   that has I/Os (or Data in general). Inside the script these newly defined I/Os can be accessed as members of the object, providing an easy syntax.
# 
# The line: model.createObject('PythonScriptDataEngine', name='PSDE', filename="DataEngine.py", classname="MyDataEngine")
# creates a PSDE-object with the name 'PSDE' and associates the script DataEngineROI.py to it. Inside the script there are three functions that the user can implement by the user parse(),init() and update():
# - parse() is called when the SOFA factory instantiates the PSDE-object and creates its I/Os. I/O-creation should be done here, especially for linked Data.
# - init() is called once, when the graph is initialized. Can be used to set initial values, etc.
# - update() is called once in every frame.
#
# The scene is very basic and just shows how the PSDE is created with an associated Python script and how I/Os can be created. The PSDE counts the points inside a mesh previously loaded and stores the value in an output. 
# The functionality can be inspected by looking at the properties (Inputs, Outputs) of the PSDE-object in the scene-graph.
#

path = os.path.dirname(os.path.abspath(__file__))+'/../../../../../../share/mesh/'
        
def createScene(rootNode):
        rootNode.createObject("MeshVTKLoader", name="loader", filename=path+'liver.vtk')
        rootNode.createObject('PythonScriptDataEngine', name='PSDE', filename="DataEngine.py", classname="MyDataEngine")	
        
