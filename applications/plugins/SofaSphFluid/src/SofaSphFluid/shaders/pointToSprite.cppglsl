
namespace sofa
{

namespace component
{

namespace visualmodel
{

namespace shader
{

const std::string pointToSpriteVS = R"SHADER_DELIM(
#version 120

uniform mat4 u_projectionMatrix;
uniform mat4 u_modelviewMatrix;
uniform float u_spriteRadius;
uniform float u_spriteScale;

varying vec4 eyeSpacePos;

void main(void)
{
    eyeSpacePos = u_modelviewMatrix * gl_Vertex;
    float dist = length(eyeSpacePos);
    gl_PointSize = u_spriteRadius * (u_spriteScale / dist);

    gl_Position = ftransform();
}

)SHADER_DELIM";

//////////////////////
const std::string pointToSpriteFS = R"SHADER_DELIM(
#version 120

uniform mat4 u_projectionMatrix;
uniform float u_zNear;
uniform float u_zFar;
uniform float u_spriteRadius;
uniform float u_spriteThickness;

varying vec4 eyeSpacePos;

void main(void)
{
    // calculate normal from texture coordinates
    vec3 N;
    N.xy = gl_PointCoord * vec2(2.0, -2.0) + vec2(-1.0, 1.0);  
    float mag = dot(N.xy, N.xy);
    if (mag > 1.0) discard;   // kill pixels outside circle
    N.z = sqrt(1.0-mag);

	// calculate depth
	vec4 spherePosEye = vec4(eyeSpacePos.xyz + N*u_spriteRadius, 1.0);
	vec4 clipSpacePos = u_projectionMatrix * spherePosEye;
	float normDepth = clipSpacePos.z / clipSpacePos.w;

	//Transform into window coordinates
	gl_FragDepth = ((gl_DepthRange.diff * normDepth) + gl_DepthRange.near + gl_DepthRange.far) / 2.0;
    // Thickness
    float thickCoeff= u_spriteThickness;
	vec4 thickness = vec4(thickCoeff,thickCoeff,thickCoeff, 1);

    //Better to put in another color_attachmentX = gl_FragData[X]
	gl_FragColor = thickness;
}

)SHADER_DELIM";

} //shader

} //visualmodel

} //component

} //sofa